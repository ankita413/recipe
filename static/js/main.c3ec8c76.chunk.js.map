{"version":3,"sources":["ingredient.jsx","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipeingredient","ingredients","map","ingredient","key","uuidv4","className","text","Math","floor","weight","Recipe","title","calories","image","useState","show","setShow","src","alt","onClick","App","recipes","setRecipes","search","setSearch","searchSubmit","setSearchSubmit","useEffect","a","fetch","response","json","data","hits","console","log","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRAceA,EAXU,SAAC,GACtB,OADuC,EAAhBC,YACJC,KAAI,SAAAC,GACnB,OACI,wBAAKC,IAAOC,eACZC,UAAY,mBACR,wBAAIA,UAAU,mBAAmBH,EAAWI,MACpD,wBAAID,UAAU,qBAAd,YAA4CE,KAAKC,MAAMN,EAAWO,cCY3DC,EAlBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMb,EAAiB,EAAjBA,YAAiB,EAChCc,oBAAS,GADuB,mBAChDC,EADgD,KAC3CC,EAD2C,KAIvD,OACA,yBAAKX,UAAU,UAEX,4BAAKM,GACL,wCAAcJ,KAAKC,MAAMI,IACzB,yBAAKK,IAAKJ,EAAOK,IAAOP,IACxB,4BAAQQ,QAAS,kBAAMH,GAASD,KAAhC,eACAA,GAAQ,kBAAC,EAAD,CAAkBf,YAAeA,MCwC9BoB,EAjDH,WACV,IADgB,EAISN,mBAAS,IAJlB,mBAIZO,EAJY,KAIJC,EAJI,OAKQR,mBAAS,IALjB,mBAKZS,EALY,KAKLC,EALK,OAMoBV,mBAAS,QAN7B,mBAMZW,EANY,KAMCC,EAND,KAQlBC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCJ,EAApC,mBATf,WASe,oBARd,qCAOG,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAMdG,KACF,CAACX,IAYF,OACC,yBAAKpB,UAAW,OACV,6CACJ,0BAAMgC,SAZQ,SAACC,GACjBA,EAAEC,iBACFb,EAAgBH,GAChBC,EAAU,KASqBnB,UAAU,cACrC,2BAAOA,UAAU,eAAemC,KAAM,OAAOC,MAAOlB,EAAQmB,SAP7C,SAACJ,GACtBd,EAAUc,EAAEK,OAAOF,UAOb,4BAAQpC,UAAU,aAAamC,KAAK,UAApC,WAEF,yBAAKnC,UAAU,WAEbgB,EAAQpB,KAAI,SAAA2C,GAAM,OAClB,kBAAC,EAAD,CACAzC,IAAOC,eACPO,MAASiC,EAAOA,OAAOC,MACvBjC,SAAYgC,EAAOA,OAAOhC,SAC1BC,MAAS+B,EAAOA,OAAO/B,MACvBb,YAAe4C,EAAOA,OAAO5C,oBCpCf8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.c3ec8c76.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/recipe.css';\r\nimport {v4 as uuidv4} from 'uuid';\r\nconst Recipeingredient = ({ingredients}) =>{\r\n    return ingredients.map(ingredient =>{\r\n        return (\r\n            <ul  key = {uuidv4()}\r\n            className = \"ingredient-list\">\r\n                <li className=\"ingredient-text\">{ingredient.text}</li>\r\n        <li className=\"ingredient-weight\">Weight = {Math.floor(ingredient.weight)}</li>\r\n            </ul>\r\n        );\r\n    });\r\n};\r\nexport default Recipeingredient;","import React, { useState } from 'react';\r\nimport  './styles/recipe.css';\r\nimport Recipeingredient from './ingredient';\r\nconst Recipe = ({title,calories,image,ingredients}) => {\r\nconst [show,setShow] = useState(false);\r\n\r\n\r\nreturn(\r\n<div className=\"recipe\">\r\n\r\n    <h3>{title}</h3>\r\n    <p>Calories: {Math.floor(calories)}</p>\r\n    <img src={image} alt = {title}  ></img>\r\n    <button onClick={() => setShow(!show)}>Ingredients</button>\r\n   {show && <Recipeingredient ingredients = {ingredients}/>}\r\n</div>\r\n \r\n);\r\n\r\n\r\n}\r\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport './styles/App.css';\nimport Recipe from './Recipe';\nimport {v4 as uuidv4} from 'uuid';\n\nconst App = () => {\n  const APP_ID = \"f6ab8b29\";\n  const APP_KEY = \"25c1acc296bd315c3aa4febbeab53e15\";\n// Declare state as an empty array bcoz recipe and its data are present in a array \nconst[recipes,setRecipes] =useState([]);\nconst[search,setSearch] = useState(\"\");\nconst[searchSubmit,setSearchSubmit] = useState('cake'); //set ice-cream as default value\n//call the getREcipes fxn when the page renders for the first time\nuseEffect(() => {\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${searchSubmit}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n    }\n    getRecipes();\n},[searchSubmit])\n// getRecipes fxn \n\nconst getSearch = (e) => {\n  e.preventDefault(); //to stop the page refresh\n  setSearchSubmit(search);\n  setSearch(\"\");\n}\n//the event e here is a event whenever the input text in the search bar changes\nconst updateSearch = (e) => {\nsetSearch(e.target.value);\n}\n return(\n  <div className =\"App\">\n        <h2>Search Recipe</h2>\n    <form onSubmit = {getSearch} className=\"search-bar\">\n      <input className=\"search-field\" type =\"text\" value={search} onChange={updateSearch}/>\n      <button className=\"search-btn\" type=\"submit\">Search</button>\n    </form>\n    <div className=\"recipes\">\n    {\n      recipes.map(recipe => (   //for each recipe in the recipes array create a recipe component\n      <Recipe \n      key = {uuidv4()}\n      title = {recipe.recipe.label} \n      calories = {recipe.recipe.calories} \n      image = {recipe.recipe.image}\n      ingredients = {recipe.recipe.ingredients}/>\n    ))}\n    </div>\n  </div>\n)\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}